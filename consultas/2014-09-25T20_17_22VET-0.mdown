> Tengo una duda , estoy haciendo una expresion regular para poder agarrar los
> string literal pero hacer la prueba, ignora las comillas dobles y el string
> dentro de las comillas dobles es convertido en tokens, es necesario escapar
> las comillas dobles en las expresiones regulares? tengo entendido que no ya
> que no son caracteres especiales, pero he probado con diferentes expresiones
> las cuales han fallado.
> Es acaso un problema de prioridad al hacer match? yo en lo personal
> considero que no ya que ninguna otra expresion comienza con comillas dobles.
> Apreciaria una pista en este tema

En efecto, no se trata de un problema de prioridad.

Las §2.4.1.3–4 de la especificación del lenguaje:

> 3. En un literal de cadena de caracteres, el caracter backslash solo puede
>     ocurrir como parte de una secuencia de escape. Una secuencia de
>     escape es un caracter backslash seguido de una n (\n), otro backslash
>     (\\), o una comilla doble (\"). Una secuencia de escape representa texto:
>     \n representa un fin de línea, \\ representa un caracter backslash, y \"
>     representa una comilla doble.
>
> 4. Un literal de cadena de caracteres es una secuencia de caracteres
>     encerrada entre comillas dobles (") y que no contiene fines de linea ni
>     comillas dobles, salvo como parte de una secuencia de escape. Las
>     comillas dobles que delimitan a un literal de cadena de caracteres no
>     pueden ser parte de una secuencia de escape. El texto representado
>     por un literal de cadena de caracteres es el mismo texto que lo compone,
>     sin sus delimitadores, y sustituyendo las secuencias de escape por el
>     texto que representan.

Un literal de cadena de caracteres es *un* solo lexema con esa estructura.  Los caracteres permitidos dentro de un literal de cadena de caracteres no incluyen a las comillas dobles, salvo por los delimitadores y aquellas que formen parte de su secuencia de escape correspondiente.  De igual manera, el caracter backslash no es un caracter permitido dentro de un literal de cadena de caracteres, salvo como parte de una secuencia de escape.  Además, dentro de un literal de cadena de caracteres puede ocurrir cualquier secuencia de escape.

Los siguientes son literales de cadena de caracteres válidos, uno por línea, y **cada uno es exactamente un lexema**:

    "foo"
    "bar baz"
    "quux \" meh"
    "\""
    "\\"
    "\\grok\""
    "wtf=\"bbq\""
    "\"\"\\\n\"\\\\\\welp"

Las secuencias de escape no son lexemas independientes.  Son maneras de describir los tipos de secuencias de caracteres que pueden ocurrir dentro de un literal de cadena de caracteres, que es un tipo de lexema.  Los lexemas son siempre considerados atómicos para efectos del análisis lexicográfico.

Otro ejemplo: aunque el literal numérico `42.27` pudiera describirse en términos de dos subsecuencias —su parte entera `42` y su parte fraccional `.27`—, es un solo lexema.

Un criterio aproximado para determinar si alguna parte de la definición del lenguaje corresponde a una estructura sintáctica o lexicográfica es si puede ocurrir espacio en blanco arbitrario entre sus componentes sin cambiar el significado o introducir errores.  Por ejemplo, todos estos literales de cadena de caracteres representan textos diferentes:

    " \\ x \" "
    "         \\ x \" "
    " \\     x     \" "
    " \\ x \"         "
    "\\x\""

Por lo tanto, no pueden considerarse a las comillas delimitadoras, ni las secuencias de escape, ni los caracteres regulares, como lexemas, porque el espacio en blanco que los separa no se ignora.

De igual manera, `42.27` es un literal numérico, pero `42    .27` es una secuencia con un error lexicográfico en el caracter `.` así que la parte entera y la parte fraccional de un literal numérico no son lexemas independientes, sino partes de un mismo lexema.
