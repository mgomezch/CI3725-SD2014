% Trinity
% Analizador de contexto
% Versión 1 - \today

- - -

# Introducción

*Esta sección es informativa.*

1.  Este documento especifica los requerimientos para la tercera etapa del desarrollo de un intérprete para el lenguaje de programación *Trinity*.

2.  Todas las versiones publicadas de este documento, incluyendo la más reciente y vigente, se encontrarán siempre disponibles en la página de la práctica, en <http://ldc.usb.ve/~05-38235/cursos/CI3725/2014SD/>.

3.  La especificación del lenguaje de programación *Trinity* **no** es parte de este documento — la definición del lenguaje se encuentra en un documento separado.  Solo una parte de lo especificado en *ese* documento debe ser implantada para la etapa especificada en *este* documento.  La especificación del lenguaje está disponible en la página del curso.

4.  Los requerimientos establecidos por este documento se dividen en dos secciones: los *requerimientos generales*, que aplican para el proyecto en general y en todas sus etapas, y los *requerimientos específicos*, que aplican únicamente para la etapa específica correspondiente a este documento.






# Requerimientos generales

*Esta sección es normativa.*

1.  En este curso, Ud. debe escribir un intérprete para el lenguaje de programación *Trinity* según lo especificado en el documento de especificación del lenguaje, este documento, y los documentos de requerimientos para las demás etapas del proyecto.

2.  El proyecto se desarrollará en cuatro partes, a saber:

    1.  El analizador lexicográfico,

    2.  el analizador sintáctico,

    3.  la tabla de símbolos y el análisis estático, y

    4.  la ejecución de programas en forma interpretada.

3.  Debe desarrollar su proyecto usando **uno** de los tres conjuntos de herramientas seleccionados para el curso:

    1.  El lenguaje de programación *Haskell*, junto con el generador de analizadores lexicográficos *Alex* y el generador de analizadores sintácticos *Happy*.

    2.  El lenguaje de programación *Ruby*, junto con el generador de analizadores sintácticos *Racc*.

    3.  El lenguaje de programación *Python*, junto con el generador de analizadores sintácticos *PLY*.

    Una vez seleccione un conjunto de herramientas para realizar su proyecto, deberá realizar las entregas de todas las etapas del proyecto con el mismo conjunto de herramientas.  No es factible y no se aceptará que se combinen herramientas ni que cambien sus herramientas una vez realizada la primera entrega.

4.  Las entregas deben realizarse vía correo electrónico a los encargados de la práctica en un archivo adjunto de nombre `CI3725-2014SD-n-gg.tar.gz`, donde `gg` es su número de grupo con dos dígitos decimales, y `n` es el número de la etapa (entre 1 y 4).  El archivo deberá contener un directorio con todo lo necesario para compilar su proyecto y ejecutarlo.  El número de carné debe escribirse con todos sus dígitos consecutivos; por ejemplo, `0538235`.

5.  No incluya en su entrega archivos producidos por herramientas generadoras de código ni compiladores que Ud. utilice para su proyecto, sino los archivos de fuente que Ud. escribió para suministrarle a esas herramientas.

6.  Su proyecto debe incluir un `Makefile` que permita generar todo lo necesario para su ejecución al ejecutar el comando `make` en el directorio contenido en su entrega.  Si Ud. elige realizar su proyecto en *Haskell*, se acepta y se recomienda que utilice *Cabal* en vez de Make para especificar lo necesario para que su proyecto compile.

7.  Es **deseable** que su proyecto funcione sin modificaciones en las computadoras del Laboratorio Docente de Computación.  Si su proyecto requiere alguna dependencia adicional por alguna situación excepcional, debe indicar las razones claramente al realizar su entrega y justificarlo en la documentación de su proyecto.

8.  Una vez efectuada la generación de código y compilación correspondiente a su proyecto, éste debe poder ejecutarse con la orden `./trinity archivo.ty` desde el directorio raíz de su proyecto, donde `archivo.ty` será la ruta (relativa o absoluta) de un archivo de entrada para su proyecto.  En caso de que utilice *Cabal* para compilar su proyecto usando las herramientas de *Haskell*, es esperado y aceptable que el ejecutable se genere en las ubicaciones usuales de esa herramienta, y no es necesario que pueda ejecutarse con ese comando exacto.

9.  Es un hecho común y natural del diseño y la implantación de lenguajes de programación que el diseño se modifique durante el desarrollo para adaptarse al contexto en el cual el lenguaje se utilizará, el cual es, en este caso, el curso.  En función de esto, tanto el documento de especificación del lenguaje como la especficación de cada etapa y entrega estarán sujetos a cambios y aclaratorias.  Los encargados de la práctica le notificarán de tales cambios y aclaratorias y actualizarán los documentos relevantes siempre que ocurran tales modificaciones a la especificación original.

10. Se acostumbra a hacer públicas las respuestas a consultas hechas por el equipo de la práctica referentes a la especificación del lenguaje y a las condiciones de entrega de cada etapa, lo cual beneficia al resto de los alumnos.  Si Ud. hace una consulta y no desea que se publique, notifíquelo al hacer su consulta.  **Todas las consultas que se publiquen serán anónimas.**

11. Deberá enviar sus entregas antes de la medianoche al final del día especificado para las entregas de cada etapa del proyecto, en hora legal de Venezuela.  Las entregas se realizarán siempre los viernes de la semana indicada para cada etapa.  Cualquier modificación al cronograma de entregas será notificada por los encargados de la práctica en la página del curso y en las horas de práctica.

12. Las entregas de cada etapa se realizarán en las siguientes semanas y tendrán la siguiente ponderación correspondiente en la evaluación del curso:

    Etapa Semana Valor (puntos) Asignación
    ----- ------ -------------- ---------------------------------------------
    1     3      5              Analizador lexicográfico
    2     5      5              Analizador sintáctico
    3     8      9              Tabla de símbolos y verificaciones estáticas
    4     11     11             Ejecución con verificaciones dinámicas

13. Deberá realizar el proyecto individualmente o en equipos de dos integrantes que estén actualmente cursando CI3725.


# Requerimientos específicos

*Esta sección es normativa.*

1.  Para esta etapa del proyecto, Ud. debe escribir un analizador de contexto para el lenguaje de programación *Trinity* utilizando las herramientas que haya seleccionado.

2.  Su analizador de contexto debe realizar todas las formas de análisis estático propias del sistema de tipos y las reglas de contexto y alcance de *Trinity* para verificar si el programa analizado está bien formado.

3.  Para realizar el análisis, debe recorrer el árbol de sintaxis abstracta del programa a analizar y producir para cada alcance del programa una tabla de símbolos, donde indique cuáles identificadores se asocian a variables en ese alcance, de qué tipo son sus variables correspondientes, y en caso de que ese alcance contenga a otros alcances anidados en su interior, cuáles alcances contiene directamente.

4.  En caso de haber seleccionado las herramientas de *Haskell*, debe definir un tipo de datos para las tablas de símbolos.  En caso de haber seleccionado las herramientas de *Python* o *Ruby*, debe definir una clase para las tablas de símbolos.

5.  Debe escribir todas las funciones o métodos para poder construir, manipular y utilizar su tabla de símbolos en su programa.  En particular, debe contar al menos con mecanismos para construir tablas de símbolos a partir de una especificación de cuáles símbolos se asocian en el alcance correspondiente a cuáles tipos, así como cuáles alcances existen anidados dentro de él, y para poder consultar en un alcance cuál es el tipo asociado a un identificador, si lo hay.

6.  Al ejecutarse, su programa debe abrir el archivo de entrada e intentar realizar el análisis de contexto sobre el programa contenido en el archivo.  El archivo de entrada se encontrará en la ruta especificada en el primer y único argumento de línea de comando suministrado a su programa.

7.  Su analizador de contexto debe operar sobre un árbol de sintaxis abstracta obtenido de su analizador sintáctico.

8.  En caso de que el programa a analizar tenga errores lexicográficos, debe reportarlos **todos** al igual que en la primera etapa; sin embargo, no debe indicar qué lexemas fueron reconocidos indivudualmente.  En caso de que el programa a analizar no tenga errores lexicográficos y no tenga sintaxis válida, solo debe reportar el **primer** error de sintaxis que encuentre al igual que en la segunda etapa.

9.  Las tablas de símbolos producidas por su analizador de contexto al analizar un programa sin errores de sintaxis deben representarse en la salida estándar en forma de texto.  La representación textual de las tablas de símbolos debe utilizar indentación para indicar la contención de un alcance dentro de otro.

10. Cuando haya construido las tablas de símbolos del programa a analizar, deberá verificar que el programa está bien formado según la especificación del lenguaje.  Esto incluye **al menos** las siguientes verificaciones[^checks] (anotadas con la sección de la especificación del lenguaje que la prescribe):

    *   §2.2.4:   Que no ocurran especificaciones de tipos vectoriales o matriciales donde las dimensiones no sean números enteros.
    *   §2.2.6:   Que no ocurran literales matriciales donde dos filas tengan cantidades de columnas distintas.
    *   §2.4.2.5: Que no ocurran declaraciones de variables con inicialización donde el tipo de la declaración sea distinto del tipo de la expresión.
    *   §2.4.2.5: Que no ocurran instrucciones de bloque que incluyan directamente más de una declaración de variable con el mismo identificador.
    *   §2.4.2.9: Que no ocurran expresiones de uso de variable en alcances donde el identificador no esté declarado.
    *   §2.4.3.2: Que no ocurran instrucciones de asignación donde el tipo asociado al identificador sea distinto del tipo de la expresión.
    *   §2.4.3.6: Que no ocurran instrucciones de asignación matricial donde la expresión cuyo valor se almacenará no sea del tipo numérico.
    *   §2.4.3.6: Que no ocurran instrucciones de asignación matricial donde las expresiones que identifican la ubicación para la asignación no sean del tipo numérico.
    *   §2.4.3.7: Que no ocurran instrucciones de asignación vectorial donde la expresión cuyo valor se almacenará no sea del tipo numérico.
    *   §2.4.3.7: Que no ocurran instrucciones de asignación vectorial donde la expresión que identifica la ubicación para la asignación no sea del tipo numérico.
    *   §2.4.4.1: Que no ocurran instrucciones de lectura de entrada con identificadores asociados a variables de tipos matriciales en el alcance donde ocurren.
    *   §2.4.5.1: Que no ocurran instrucciones condicionales donde la expresión de la condición no sea del tipo booleano.
    *   §2.4.6.1: Que no ocurran instrucciones de iteración indeterminada donde la expresión de la condición no sea del tipo booleano.
    *   §2.4.6.2: Que el rango de iteración de una instrucción de iteración determinada sea de un tipo matricial.
    *   §2.4.7.1: Que no ocurran especificaciones de funciones con más de una especificación de parámetro con el mismo identificador.
    *   §2.4.7.5: Que no ocurran expresiones de llamadas a funciones con identificadores que no sean el identificador de alguna especificación de función en el programa.
    *   §2.4.7.5: Que no ocurran expresiones de llamadas a funciones con secuencias de argumentos cuyos tamaños o tipos respectivos sean distintos del tamaño de las secuencias de especificaciones de parámetros de las especificaciones de funciones del programa con los mismos identificadores que los usados en las expresiones de llamadas a funciones.
    *   §2.4.7.6: Que no ocurran instrucciones de retorno donde la expresión sea de un tipo distinto del tipo de retorno de la especificación de función en la cual ocurre.
    *   §2.4.7.6: Que no ocurran instrucciones de retorno fuera de una especificación de función.
    *   §2.4.8.1: Que no ocurra en el programa más de una especificación de función con el mismo identificador.

[^checks]: Note que esta lista de condiciones para programas bien formados en *Trinity* no necesariamente es exhaustiva.  La especificación de *Trinity* es la única referencia normativa para cuáles propiedades deben verificarse para decidir si un texto constituye un programa bien formado en *Trinity*.  Esta lista únicamente *sugiere* varias de las verificaciones que deben realizar, pero en caso de que la especificación del lenguaje especifique alguna condición para que un programa esté bien formado y no ocurra en esta lista, **debe** realizar esa verificación.

11. Al final de la ejecución, su programa debe terminar con un estado de salida distinto de cero si se encontraron errores, y con el estado de salida cero si no se encontraron errores.

12. Para esta etapa del proyecto, **no** debe realizar ningún tipo de ejecución de los programas a analizar, ni ninguna verificación que dependa del estado de los programas en ejecución.  En particular, ninguna de las verificaciones que puedan abortar la ejecución del programa están dentro del alcance de esta etapa del proyecto.

13. Como ejemplo concreto, considere el programa

        function foo(boolean bar, row(3) baz)
        return number
        begin
          if bar
            then
              return 42;
            else
              use
                number x = baz[1];
                number y = baz[2];
                number z = baz[3];
              in
                print_row3(baz);
                return x*x + y*y + z*z;
              end;
            end;
          end;
        end;

        function print_row3(row(3) r)
        return boolean
        begin
          print "| ";
          for n in r do
            print n, " ";
          end;
          print "|\n";
        end;

        program
          print "n? ";
          use
            number n;
          in
            read n;
            use
              number n;
            in
              set n = 42;
              if n < 0 then
                1/0;
              end;
            end;
            while n > 0 do
              use
                number foo = (n + 1) * 0.1;
                number bar = (n + 2) * 0.1;
                number baz = (n + 3) * 0.1;
              in
                print
                  "norma de (",
                   foo, " ",
                   bar, " ",
                   baz, ") = ",
                   foo(n mod 2 == 0, { foo, bar, baz }), "\n";
              end;
              set n = n - 1;
            end;
          end;
        end;

    Al analizar este programa, se encuentran los siguientes alcances con sus respectivas tablas de símbolos:

        - Alcance foo:
            Símbolos:
              bar: boolean
              baz: row(3)
            Hijos:
              - Alcance 0:
                  Símbolos:
                    x: number
                    y: number
                    z: number
                  Hijos: []

        - Alcance print_row3:
            Símbolos:
              r: row(3)
            Hijos:
              - Alcance 1:
                  Símbolos:
                    n: number
                  Hijos: []

        - Alcance _main:
            Símbolos: []
            Hijos:
              - Alcance 2:
                  Símbolos:
                    n: number
                  Hijos:
                    - Alcance 3:
                        Símbolos:
                          n: number
                        Hijos: []

                    - Alcance 4:
                        Símbolos:
                          foo: number
                          bar: number
                          baz: number
                        Hijos: []

14. Como ejemplo concreto de un error de contexto, al analizar la entrada

        program
          use
            number n;
          in
            read n;
          end;
          print n + 1;
        end;

    debe indicarse un error por la ocurrencia de una expresión de uso de variable que no está declarada en el contexto donde ocurre, como, por ejemplo,

        Error: Uso de variable no declarada `n`.

    De igual manera, al analizar la entrada

        program
          print 2 + not true;
        end;

    debe indicarse un error por una suma mal formada cuyas subexpresiones no son ambas del tipo numérico, como, por ejemplo,

        Error: La expresión `not true` tiene el tipo `boolean`, y se esperaba el tipo `number`.

15. Tanto los códigos asociados a cada alcance, como el formato exacto de salida para la información de cada alcance y sus tablas de símbolos, y los mensajes asociados a cada tipo de error de contexto, quedan a su criterio — se requiere únicamente que contengan al menos la información requerida e ilustrada en estos ejemplos.
